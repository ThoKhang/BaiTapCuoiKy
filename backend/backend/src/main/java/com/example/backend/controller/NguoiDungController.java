package com.example.backend.controller;

import com.example.backend.model.NguoiDung;
import com.example.backend.repository.NguoiDungRepository;
import com.example.backend.service.EmailService;  // Import EmailService (n·∫øu ch∆∞a c√≥)
import com.example.backend.service.OTPService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.*;

import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*") // Cho ph√©p Android g·ªçi API
public class NguoiDungController {
    
    @Autowired
    private NguoiDungRepository repo;
    
    @Autowired
    private EmailService emailService;  // S·ª≠a t√™n bi·∫øn: lowercase, chu·∫©n Java
    
    @Autowired
    private OTPService otpService;
    
    @Autowired
private javax.sql.DataSource dataSource;

@GetMapping("/db-test")
public String checkDatabase() {
    try (var conn = dataSource.getConnection()) {
        return "ƒêang k·∫øt n·ªëi t·ªõi database: " + conn.getCatalog();
    } catch (Exception e) {
        e.printStackTrace();
        return "L·ªói khi ki·ªÉm tra DB: " + e.getMessage();
    }
}

    // L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng (th√™m try-catch ƒë·ªÉ tr√°nh JSON error)
    @GetMapping("/nguoi-dung")
    public ResponseEntity<?> getAllNguoiDung() {
        try {
            return ResponseEntity.ok(repo.findAll());
        } catch (Exception e) {
            e.printStackTrace(); // Log l·ªói
            return ResponseEntity.status(500).body("L·ªói khi l·∫•y d·ªØ li·ªáu: " + e.getMessage());
        }
    }

    // ƒêƒÉng k√Ω: G·ª≠i email x√°c nh·∫≠n sau khi save
    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody NguoiDung nguoiDung) {
        try {
            if (repo.findByEmail(nguoiDung.getEmail()) != null) {
                return ResponseEntity.badRequest().body("Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i, vui l√≤ng nh·∫≠p ng∆∞·ªùi d√πng m·ªõi!");
            }
            nguoiDung.setMaVaiTro((byte) 2);  // Default NguoiDung (MaVaiTro = 2)
            repo.save(nguoiDung);
            emailService.sendOTP(nguoiDung.getEmail(), nguoiDung.getTenDangNhap());
            return ResponseEntity.ok("OTP ƒë√£ g·ª≠i v·ªÅ email c·ªßa b·∫°n! Vui l√≤ng ki·ªÉm tra!");
        } catch (Exception e) {
            e.printStackTrace(); // Log l·ªói ƒë·ªÉ debug
            return ResponseEntity.status(500).body("L·ªói ƒëƒÉng k√Ω: " + e.getMessage());
        }
    }
    
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody NguoiDung nguoiDung) {
        try {
            NguoiDung existing = repo.findByEmail(nguoiDung.getEmail());
            if (existing != null && existing.getMatKhauMaHoa().equals(nguoiDung.getMatKhauMaHoa())) {
                emailService.sendOTP(existing.getEmail(), existing.getTenDangNhap());
                return ResponseEntity.ok("ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra Email ƒë·ªÉ nh·∫≠n OTP!");
            }
            return ResponseEntity.badRequest().body("T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("L·ªói ƒëƒÉng nh·∫≠p: " + e.getMessage());
        }
    }
    
    @PostMapping("/verify-otp")
    public ResponseEntity<?> verifyOTP(@RequestBody Map<String, String> request) {
        try {
            String email = request.get("email");
            String otp = request.get("otp");
            if (otpService.validateOTP(email, otp)) {
                return ResponseEntity.ok("X√°c th·ª±c OTP th√†nh c√¥ng! Ch√†o m·ª´ng ƒë·∫øn v·ªõi ·ª©ng d·ª•ng");
            }
            return ResponseEntity.badRequest().body("X√°c th·ª±c kh√¥ng th√†nh c√¥ng, OTP kh√¥ng ƒë√∫ng ho·∫∑c h·∫øt h·∫°n!");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("L·ªói x√°c th·ª±c OTP: " + e.getMessage());
        }
    }
    
    @PostMapping("/send-otp")
    public ResponseEntity<?> sendOTP(@RequestBody Map<String, String> request) {
        try {
            String email = request.get("email");
            NguoiDung nguoiDung = repo.findByEmail(email);
            if (nguoiDung == null) {
                return ResponseEntity.badRequest().body("Email kh√¥ng t·ªìn t·∫°i!");
            }
            emailService.sendOTP(email, nguoiDung.getTenDangNhap());
            return ResponseEntity.ok("OTP ƒë√£ g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("L·ªói g·ª≠i OTP: " + e.getMessage());
        }
    }
    // üü¢ G·ª≠i OTP khi qu√™n m·∫≠t kh·∫©u
    @PostMapping("/forgot-password")
    public ResponseEntity<?> forgotPassword(@RequestBody Map<String, String> request) {
        try {
            String email = request.get("email");
            NguoiDung nguoiDung = repo.findByEmail(email);

            if (nguoiDung == null) {
                return ResponseEntity.badRequest().body("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!");
            }

            // G·ª≠i OTP qua email
            emailService.sendOTP(email, nguoiDung.getTenDangNhap());
            return ResponseEntity.ok("ƒê√£ g·ª≠i OTP ƒë·∫øn email c·ªßa b·∫°n!");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("L·ªói g·ª≠i OTP: " + e.getMessage());
        }
    }

    // üü° X√°c nh·∫≠n OTP v√† ƒë·ªïi m·∫≠t kh·∫©u m·ªõi
    @PostMapping("/reset-password")
    public ResponseEntity<?> resetPassword(@RequestBody Map<String, String> request) {
        try {
            String email = request.get("email");
            String newPassword = request.get("newPassword");

            if (email == null || newPassword == null) {
                return ResponseEntity.badRequest().body("Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt!");
            }


            NguoiDung nguoiDung = repo.findByEmail(email);
            if (nguoiDung == null) {
                return ResponseEntity.badRequest().body("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!");
            }

            // ‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
            nguoiDung.setMatKhauMaHoa(newPassword); // sau n√†y c√≥ th·ªÉ m√£ h√≥a b·∫±ng BCrypt
            repo.save(nguoiDung);

            return ResponseEntity.ok("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("L·ªói reset m·∫≠t kh·∫©u: " + e.getMessage());
        }
    }

    @GetMapping("/nguoi-dung/{id}/tongbaihoc-phanmon")
    public ResponseEntity<?> getTongBaiHocTheoMon(@PathVariable int id) {
        try {
            var nguoiDung = repo.findById(id).orElse(null);
            if (nguoiDung == null)
                return ResponseEntity.status(404).body("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + id);
            NguoiDung dto = new NguoiDung();
            dto.setMaNguoiDung(nguoiDung.getMaNguoiDung());
            dto.setTenDangNhap(nguoiDung.getTenDangNhap());
            dto.setEmail(nguoiDung.getEmail());
            dto.setMaVaiTro(nguoiDung.getMaVaiTro());
            dto.setNgayTao(nguoiDung.getNgayTao());
            dto.setTongDiem(nguoiDung.getTongDiem());
            dto.setMatKhauMaHoa(nguoiDung.getMatKhauMaHoa());
            String sql = "EXEC dbo.sp_GetTongBaiHocTheoMon @MaNguoiDung = ?";
            var result = jdbcTemplate.queryForList(sql, id);
            String toanTienDo = "0/0";
            String tvTienDo = "0/0";

            for (var row : result) {
                String monRaw = String.valueOf(row.get("TenMonHoc"));
                String tienDo = String.valueOf(row.get("TienDoHoc"));
                String monNormalized = java.text.Normalizer.normalize(monRaw, java.text.Normalizer.Form.NFD)
                        .replaceAll("\\p{InCombiningDiacriticalMarks}+", "") // b·ªè d·∫•u ti·∫øng Vi·ªát
                        .replace("ƒë", "d").replace("ƒê", "D")                 // chuy·ªÉn ƒë -> d
                        .replace("?", "")                                    // lo·∫°i k√Ω t·ª± l·ªói
                        .replaceAll("[^a-zA-Z0-9 ]", "")                     // b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát kh√°c
                        .toLowerCase()
                        .trim();

                if (monNormalized.contains("toan")) {
                    toanTienDo = tienDo;
                } else if (monNormalized.contains("viet") || monNormalized.contains("vit") || monNormalized.contains("tieng")) {
                    tvTienDo = tienDo;
                }
            }

            dto.setToanTienDo(toanTienDo);
            dto.setTiengVietTienDo(tvTienDo);


            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of(
                    "Loi", "L·ªói khi l·∫•y d·ªØ li·ªáu",
                    "ChiTiet", e.getMessage()
            ));
        }
    }


    @Autowired
    private JdbcTemplate jdbcTemplate;

    /**
     * ƒê√°nh d·∫•u ng∆∞·ªùi d√πng ƒë√£ ho√†n th√†nh ti√™u ƒë·ªÅ ph·ª•.
     * G·ªçi stored procedure dbo.usp_HoanThanhTieuDePhu ƒë·ªÉ c·ªông ƒëi·ªÉm v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i.
     */
    @PostMapping("/hoanthanh-tieudephu")
    public ResponseEntity<?> hoanThanhTieuDePhu(
            @RequestParam int maNguoiDung,
            @RequestParam int maTieuDePhu) {
        try {
            // G·ªçi stored procedure
            String sql = "EXEC dbo.usp_HoanThanhTieuDePhu @MaNguoiDung = ?, @MaTieuDePhu = ?";
            var result = jdbcTemplate.queryForList(sql, maNguoiDung, maTieuDePhu);

            // N·∫øu SP kh√¥ng tr·∫£ d·ªØ li·ªáu
            if (result == null || result.isEmpty()) {
                return ResponseEntity.ok(Map.of(
                        "TrangThai", "KhongCoPhanHoi",
                        "ThongBao", "Th·ªß t·ª•c ƒë√£ th·ª±c thi nh∆∞ng kh√¥ng tr·∫£ d·ªØ li·ªáu."
                ));
            }

            // Th√†nh c√¥ng
            return ResponseEntity.ok(result);

        } catch (Exception e) {
            // Ghi log l·ªói ƒë·ªÉ ti·ªán debug
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of(
                    "Loi", "L·ªói khi c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô ti√™u ƒë·ªÅ ph·ª•",
                    "ChiTiet", e.getMessage()
            ));
        }
    }


}